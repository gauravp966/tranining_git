git init:
	To initialize a Git repository.

git status:
	To see what the current state of our project is.

git add octocat.txt:
	To tell Git to start tracking changes made to octocat.txt.

git status:
	Git is now tracking our octocat.txt file. Let's run git status again to see where we stand.

git commit -m "Add cute octocat story":
	To store our staged changes we run the commit command with a message describing what we've changed.

git add '*.txt':
	 We can add all the new files using a wildcard with git add.

git commit -m 'Add all the octocat txt files':
	So we've made a few commits. Now let's browse them to see what we changed.

git log:
	Think of Git's log as a journal that remembers all the changes we've committed so far, in the order we committed them.

git remote add origin https://github.com/try-git/try_git.git:
	To push our local repo to the GitHub server we'll need to add a remote repository.

git push -u origin master:
	The name of our remote is origin and the default local branch name is master. The -u tells Git to remember the parameters, so that next time we can simply run git push and Git will know what to do.

git pull origin master:
	We can check for changes on our GitHub repository and pull down any new changes by running.

git diff HEAD:
	Let's take a look at what is  different from our last commit by using the git diff command.

git add octofamily/octodog.txt:
	Another great use for diff is looking at changes within files that have already been staged. Remember, staged files are files we have told git that are ready to be committed.

git diff --staged:
	Run git diff with the --staged option to see the changes you just staged. You should see that octodog.txt was created.

git reset octofamily/octodog.txt:
	You can unstage files by using the git reset command.

git checkout -- octocat.txt:
	Files can be changed back to how they were at the last commit by using the command: git checkout -- <target>.

git branch clean_up:
	When developers are working on a feature or bug they'll often create a copy (aka. branch) of their code they can make separate commits to. Then when they're done they can merge this branch back into their main master branch.

git checkout clean_up:
	You can switch branches using the git checkout <branch> command.

git rm '*.txt':
	You can finally remove all those pesky octocats by using the git rm command which will not only remove the actual files from disk, but will also stage the removal of the files for us.

git commit -m "Remove all the cats":
	Run git status to check the changes you're about to commit.

git checkout master:
	You just need to switch back to the master branch so you can copy (or merge) your changes from the clean_up branch back into the master branch.

git merge clean_up:
	We're already on the master branch, so we just need to tell Git to merge the clean_up branch.

git branch -d clean_up:
	You can use git branch -d <branch name> to delete a branch.

git push:
	To push everything you've been working on to your remote repository.

